[
{
	"uri": "//localhost:1313/4-configure-apigateway/1-create-rest-api/",
	"title": "Create REST API",
	"tags": [],
	"description": "",
	"content": "Next, we will set up API Gateway to interact with the Lambda functions created in the previous section:\nCreate REST API In the Console interface: Search for keyword: API Gateway Select REST API Select New API\nAPI name: api-dcj-rds\nDescription – optional: test\nAPI endpoint type: Regional\nSelect Create API REST API successfully created\nNext select Create resource So we have created a new REST API and resources for it. Next, we will create methods that interact with the Lambda function and implement them.\nCreate Method API Select Create Method Method type: POST\nIntegration type: Lambda function\nLambda function: ChangeDataRDS\nSelect Create Method After successfully creating the POST method, next select Deploy API Select Stage: New stage Stage name: changdata Select Deploy Copy the Invoke URL of the created POST method "
},
{
	"uri": "//localhost:1313/5-configure-cognito/1-create-user-pool/",
	"title": "Create User Pool",
	"tags": [],
	"description": "",
	"content": "Create User pool In the Console interface: Search for keyword: Cognito Select User pools on the left menu Click Create user pool Select User name, Email\nCheck Allow users to sign in with a preferred user name Click Next Select Cognito defaults for Password policy Scroll down, select No MFA for Multi-factor authentication\nSelect Email only for Delivery method Click Next Leave default options Scroll down to the Additional required attributes section: Select name Click Next Select Send email with Cognito Click Next In the SMS configuration section: Select Create a new IAM role IAM role name: cognito-sms-role Click Next Create User pool\nEnter a name for the user pool, for example: test-lamda-pool-01 Select Use the Cognito Hosted UI Domain: Select Use a Cognito domain Enter a domain, for example: https://test-fcj-cloud Create App Client\nSelect Public client Enter a name for the app client, for example: test-change-data-rds At Advanced app client settings\nSelect ALLOW_USER_PASSWORD_AUTH Select ALLOW_USER_SRP_AUTHSRP Select ALLOW_CUSTOM_AUTH Then select Next, Select Create user pool "
},
{
	"uri": "//localhost:1313/",
	"title": "DEPLOY SECURE APIS ON AWS ​​WITH API GATEWAY, LAMBDA, COGNITO, AND RDS",
	"tags": [],
	"description": "",
	"content": "DEPLOY SECURE APIS ON AWS ​​WITH API GATEWAY, LAMBDA, COGNITO, AND RDS Overview In this workshop, we will practice combining multiple AWS services to build a complete system, from user management, data processing to providing APIs for applications. Specifically, you will be able to do and understand the following:\nDeployment model Content: Introduce Preparation RDS Instance Connect API Gateway Configuration Configuring Cognito with API Gateway Test Clean up resources "
},
{
	"uri": "//localhost:1313/1-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Introduction You will learn how to integrate services such as Amazon RDS, AWS Lambda, Amazon Cognito, Amazon API Gateway to build a web system or serverless application (no need to manage servers).\nAmazon RDS: You will understand how to create and manage relational databases (MySQL, PostgreSQL, etc.) on AWS to store data.\nAWS Lambda: You will learn how to create Lambda functions to handle application logic without having to manage servers. Lambda can connect to RDS and S3 to manipulate data.\nAmazon Cognito: You will learn how to use Amazon Cognito to authenticate and manage users, secure your APIs, and authenticate requests from users.\nAPI Gateway: You will learn how to configure an API Gateway to provide HTTP endpoints that allow users or applications to communicate with Lambda, and secure the API using Cognito for authentication.\nServices covered in the workshop include: Amazon Relational Database Service (Amazon RDS)\nAmazon Relational Database Service is a managed service that allows you to deploy and manage relational databases on AWS. Amazon RDS is an online transaction processing (OLTP) database. The primary use case is transactional databases (rather than analytical databases). It is best suited for structured and relational data storage requirements. It is intended to be an easy alternative to traditional on-premises instances of the same database. Automatic backups and patching are performed during customer-defined maintenance windows. Scaling, replication, and availability are a click away. AWS Lambda\nWhat it does: Lets you run code without managing servers. Lambda automatically scales to handle thousands of requests per second. What it is: Run serverless functions, such as processing API requests, interacting with RDS databases, without maintaining a server. Amazon API Gateway\nWhat it does: Provides an API to connect applications to back-end services like Lambda. What it does: Create and manage RESTful or WebSocket APIs that allow users or applications to call Lambda functions over HTTP/HTTPS. API Gateway provides security, monitoring, and access control. Amazon Cognito\nWhat it does: Provides user authentication, login management, and access rights for mobile and web applications. What it does: Manage users and authenticate users in applications, protect APIs by integrating authentication with API Gateway, ensuring only logged-in users can access resources. AWS Service Deployment and Configuration Steps: You will practice creating AWS services and connecting them together, thereby creating a complete system. You will understand the deployment process, from creating AWS services to integrating them into a seamless operating system.\nCreate VPC and security group Create and configure Amazon RDS for database. Create EC2 to connect and add data to RDS instance Build Lambda functions and connect to RDS. Create an API Gateway and integrate with Lambda to handle requests from users. Create a user pool and authenticate with Amazon Cognito. Configure API Gateway security via Cognito, ensuring only authenticated users can call the API. "
},
{
	"uri": "//localhost:1313/2-prepareration/1-configure-vpc/",
	"title": "VPC Configuration",
	"tags": [],
	"description": "",
	"content": "VPC Configuration In the AWS console interface, perform Search and select VPC In the VPC management interface Select Your VPC Select Create VPC The configuration table for VPC appears Select VPC and more Name FCJ-Lab Select Availability Zones (AZs): 2\nSelect public subnets: 2\nSelect private subnets: 2\nIn the VPC endpoint section\nSelect None Select Create VPC After creating the VPC, we proceed to check the information of the newly created VPC. Select FCJ-Lab-vpc just created to see the overview Configure Public Subnet In the VPC management interface, in the left selection, scroll down Select Subnets Search for FCJ-Lab We will see that there are 2 public subnets: FCJ-Lab-subnet-public1-ap-southeast-1a, FCJ-Lab-subnet-public2-ap-southeast-1b\nFirst we will set up FCJ-Lab-subnet-public1-ap-southeast-1b Select FCJ-Lab-subnet-public1-ap-southeast-1a Select Action Select Edit subnet settings The configuration table for the public subnet appears Click to select Enable auto-assign public IPv4 address Select Save Similarly, we will set for FCJ-Lab-subnet-public2-ap-southeast-1b Thus, we have just configured VPC and enabled public IPv4 for the public subnet.\n"
},
{
	"uri": "//localhost:1313/3-connect-rds/1-db-subnet-group/",
	"title": "Create DB Subnet Group",
	"tags": [],
	"description": "",
	"content": "Create DB Subnet Group In the AWS console interface, type:\nSearch for the keyword: RDS Select the section: Subnet groups\nSelect: Create DB subnet group Enter the name: fcj-lab-subnet-group-db\nEnter the description: Subnet Group for FCJ Management\nSelect the previously created VPC as FCJ-Lab-vpc Select Availability Zones that were created with the previously created VPC Select 2 Subnet private Check again and select Create Completed creating a Subnet groups "
},
{
	"uri": "//localhost:1313/4-configure-apigateway/2-check-api-with-postman/",
	"title": "Check API with Postman",
	"tags": [],
	"description": "",
	"content": "Postman is currently one of the most popular tools used in testing APIs.\nAs we know, API is responsible for connecting applications together, having Postman will make working with this API easier. Normally, Postman will be used for REST API. With Postman, we can call Rest API without writing any code.\nDownload Postman.\nTest API with Postman Click on the + ,sign to add a new tab\nSelect POST method Enter InvokURL of the POST API recorded from the previous step Enter RequestBody in raw format: {\r\u0026#34;method\u0026#34;: \u0026#34;GET\u0026#34;\r} Press Send button The returned result is all the processed data of the User table\n"
},
{
	"uri": "//localhost:1313/3-connect-rds/2-start-db/",
	"title": "Create RDS Instance",
	"tags": [],
	"description": "",
	"content": "Launch RDS Instance Create RDS Instance\nSelect section: Databases\nSelect: Create Database Select method: Standard create\nSelect storage type: MySQL Select template: Dev/Test\nSelect Multi-AZ DB instance We can adjust this part to suit your requirements to optimize your costs, but there will also be some limitations so you need to study carefully. Enter DB instance name: fcj-database-instance\nEnter username: admin\nEnter password: admin2024 In the settings section: Connect to the created VPC: FCJ-Lab-vpc\nSelect the Subnet created from the previous section: fcj-lab-subnet-group-db\nPublic access: Yes Select the Security group created for the DB: FCJ-Lab-sg-db\nThe following part can be left as default or configured as desired Check the configurations carefully to avoid confusion affecting the implementation cost\nSelect Create Complete creating DB instance and this process must wait about 15 minutes to show Available "
},
{
	"uri": "//localhost:1313/2-prepareration/2-create-security-group/",
	"title": "Create Security Group",
	"tags": [],
	"description": "",
	"content": "Configure Security Group Configure Security Group for EC2 instance\nIn the VPC management interface, select the left option. Select Security Groups Select Create security group Configuration for Security Group In the Basic details section Name the security group: FCJ-Lab-sg-public Description: Security group for FCJ Lab VPC: FCJ-Lab-vpc In the Inbound rules section We will add the following rules: Type SSH source Anywhere-IPv4 Type HTTP source Anywhere-IPv4 Type HTTPS source Anywhere-IPv4 Type Custom TCP, port range 3000, source Anywhere-IPv4 In the Outbound section, we will leave it as default Click Create security group Configure Security Group for database instance\nSimilar to the step of creating a security group above. Configure Security Group DB In the Basic details section Security group name FCJ-Lab-sg-db Description Security group for RDS database instance VPC FCJ-Lab-vpc In the Inbound section Select Type MYSQL/Aurora Source select FCJ-Lab-sg In the Outbound section. We leave it as default Select Create security group "
},
{
	"uri": "//localhost:1313/5-configure-cognito/2-create-group-cognito/",
	"title": "Create User And Group Cognito",
	"tags": [],
	"description": "",
	"content": "Create users and groups for Cognito After successfully creating user pool, go to the user pool information: test-lambda-pool-01 In the Users tab. Select Create Users In the user information section Create an account including username, email and password Select Create User Then cognito will send the username and password when the user is registered. Go back to the pool to create a group\nSelect Create group In the group information section Enter the group name, such as: admin\nScroll down and select Create Group After successfully creating the user and group\nGo to Group: admin\nSelect Add user to group Select the user just created Click Add "
},
{
	"uri": "//localhost:1313/2-prepareration/",
	"title": "Preparation",
	"tags": [],
	"description": "",
	"content": "Preparation In this section we will configure VPC, Security Group for RDS database instance, create role for Lamda\nVPC Configuration Create Security Group Create Role for Lambda "
},
{
	"uri": "//localhost:1313/2-prepareration/3-create-role/",
	"title": "Create Role for Lambda",
	"tags": [],
	"description": "",
	"content": "Create Role for Lambda In the Console interface: Search for keyword: IAM Select Create Role Fill in information:\nSelect usage type: AWS service Service: Lambda Select Next Search for the corresponding keyword and select the following permissions: Select AmazonRDSFullAccess Select AmazonEC2FullAccess Select AWSLambdaVPCAccessExecutionRole Select AmazonVPCFullAccess Enter the role name: RoleLambdatochangedataRDS Double check and select Create role "
},
{
	"uri": "//localhost:1313/3-connect-rds/3-launch-ec2/",
	"title": "Launch EC2 Instance",
	"tags": [],
	"description": "",
	"content": "Launch EC2 Instance In the AWS Console interface. Search and select EC2 In the EC2 management interface Select Instance\nSelect Launch Instances Name: FCJ-instance\nSelect operating system: Ubuntu\nAmazon Machine Image (AMI): Ubuntu Server 24.04 Select Create new key pair\nKey pair name: lab-keypair\nSelect Create key pair Instance type: t2.micro\nSelect the newly created keypair: lab-keypair Scroll down to the network settings configuration section VPC: FCJ-Lab-vpc Select public subnet: FCJ-Lab-subnet-public1-ap-southeast-1a Auto-assign public IP: Enable Select Select existing security group: FCJ-Lab-sg-public Check the information in the right frame again.\nSelect Launch Template After launching the instance. Next, we select Connect Execute some commands to update information, installation packages in the machine sudo apt update -y\rsudo apt upgrade -y Install MySQL Client To be able to add data to RDS, MySQL Client is required. Proceed to install MySQL Client. sudo apt install mysql-client Connect to RDS Now we will use the previously downloaded mysql-client to connect to the RDS Instance.\nFirst, go to RDS Console\nSelect the RDS Instance that we created earlier (fcj-database-instance).\nCopy Endpoint.\n$mysql -h \u0026ldquo;rds-endpoint\u0026rdquo; -u admin -p password: admin2024 After successfully connecting to the database, we paste all the scripts to execute\nSET SQL_MODE = \u0026#34;NO_AUTO_VALUE_ON_ZERO\u0026#34;;\rSTART TRANSACTION;\rSET time_zone = \u0026#34;+00:00\u0026#34;;\r/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;\r/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;\r/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;\r/*!40101 SET NAMES utf8mb4 */;\r--\r-- Create `fcjresbar` database\r--\rCREATE DATABASE IF NOT EXISTS `fcjresbar`;\rUSE `fcjresbar`;\r-- --------------------------------------------------------\r--\r-- Create and define schema of `Categories` table\r--\rDROP TABLE IF EXISTS `Categories`;\rCREATE TABLE IF NOT EXISTS `Categories` (\r`id` int(11) NOT NULL AUTO_INCREMENT,\r`name` varchar(255) NOT NULL,\r`createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,\r`updatedAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,\rPRIMARY KEY (`id`)\r) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;\r--\r-- Insert data into `Categories` table\r--\rINSERT INTO `Categories` (`id`, `name`, `createdAt`, `updatedAt`)\rVALUES\r(1, \u0026#39;CERVEZAS\u0026#39;, \u0026#39;2021-08-23 05:50:50\u0026#39;, \u0026#39;2021-08-23 05:50:50\u0026#39;),\r(2, \u0026#39;GASEOSAS\u0026#39;, \u0026#39;2021-08-23 05:50:50\u0026#39;, \u0026#39;2021-08-23 05:50:50\u0026#39;),\r(3, \u0026#39;PIZZAS\u0026#39;, \u0026#39;2021-08-23 05:50:50\u0026#39;, \u0026#39;2021-08-23 05:50:50\u0026#39;),\r(4, \u0026#39;HAMBURGUESAS\u0026#39;, \u0026#39;2021-08-23 05:50:50\u0026#39;, \u0026#39;2021-08-23 05:50:50\u0026#39;),\r(5, \u0026#39;EMPANADAS\u0026#39;, \u0026#39;2021-08-23 05:50:50\u0026#39;, \u0026#39;2021-08-23 05:50:50\u0026#39;),\r(6, \u0026#39;LOMITOS\u0026#39;, \u0026#39;2021-08-23 05:50:50\u0026#39;, \u0026#39;2021-08-23 05:50:50\u0026#39;);\r-- --------------------------------------------------------\r--\r-- Create and define schema of `Clients` table\r--\rDROP TABLE IF EXISTS `Clients`;\rCREATE TABLE IF NOT EXISTS `Clients` (\r`id` int(11) NOT NULL AUTO_INCREMENT,\r`name` varchar(255) NOT NULL,\r`address` varchar(255) NOT NULL DEFAULT \u0026#39;Address\u0026#39;,\r`phone` varchar(255) NOT NULL DEFAULT \u0026#39;999999999\u0026#39;,\r`email` varchar(255) NOT NULL,\r`dni` varchar(255) NOT NULL,\r`createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,\r`updatedAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,\rPRIMARY KEY (`id`),\rUNIQUE KEY `email` (`email`),\rUNIQUE KEY `dni` (`dni`)\r) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;\r--\r-- Insert data into`Clients` table\r--\rINSERT INTO `Clients` (`id`, `name`, `address`, `phone`, `email`, `dni`, `createdAt`, `updatedAt`)\rVALUES\r(1, \u0026#39;Nguyen Anh Tuan\u0026#39;, \u0026#39;Bien Hoa, Dong Nai\u0026#39;, \u0026#39;0123456789\u0026#39;, \u0026#39;tuna@example.com\u0026#39;, \u0026#39;999999999\u0026#39;, \u0026#39;2024-10-07 05:50:51\u0026#39;, \u0026#39;2024-10-07 21:34:51\u0026#39;),\r(2, \u0026#39;Tu Nhat Phuong\u0026#39;, \u0026#39;Bien Hoa, Dong Nai\u0026#39;, \u0026#39;0143486720\u0026#39;, \u0026#39;fromsunnews@example.com\u0026#39;, \u0026#39;111118291\u0026#39;, \u0026#39;2024-10-07 07:20:30\u0026#39;, \u0026#39;2024-10-07 21:36:51\u0026#39;),\r(3, \u0026#39;Thai Anh Duc\u0026#39;, \u0026#39;Phu My, Ba Ria\u0026#39;, \u0026#39;0324125123\u0026#39;, \u0026#39;duckie@example.com\u0026#39;, \u0026#39;125123145\u0026#39;, \u0026#39;2024-10-07 12:21:22\u0026#39;, \u0026#39;2024-10-07 21:37:12\u0026#39;),\r(4, \u0026#39;Ly Hoang Viet\u0026#39;, \u0026#39;Nhon Trach, Dong Nai\u0026#39;, \u0026#39;0293192412\u0026#39;, \u0026#39;viethoang@example.com\u0026#39;, \u0026#39;090122341\u0026#39;, \u0026#39;2024-10-07 15:11:09\u0026#39;, \u0026#39;2024-10-07 21:40:32\u0026#39;);\r-- --------------------------------------------------------\r--\r-- Create and define schema of `OrderProducts` table\r--\rDROP TABLE IF EXISTS `OrderProducts`;\rCREATE TABLE IF NOT EXISTS `OrderProducts` (\r`id` int(11) NOT NULL AUTO_INCREMENT,\r`quantity` int(11) DEFAULT NULL,\r`orderId` int(11) NOT NULL,\r`productId` int(11) NOT NULL,\rPRIMARY KEY (`id`),\rKEY `orderId` (`orderId`),\rKEY `productId` (`productId`)\r) ENGINE=InnoDB DEFAULT CHARSET=utf8;\r-- --------------------------------------------------------\r--\r-- Insert data into `Orders` table\r--\rDROP TABLE IF EXISTS `Orders`;\rCREATE TABLE IF NOT EXISTS `Orders` (\r`id` int(11) NOT NULL AUTO_INCREMENT,\r`total` double NOT NULL,\r`isPaid` tinyint(1) NOT NULL DEFAULT \u0026#39;0\u0026#39;,\r`delivery` tinyint(1) NOT NULL DEFAULT \u0026#39;0\u0026#39;,\r`note` varchar(255) DEFAULT NULL,\r`userId` int(11) NOT NULL,\r`clientId` int(11) NOT NULL,\r`tableId` int(11) DEFAULT NULL,\r`createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,\r`updatedAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,\rPRIMARY KEY (`id`),\rKEY `userId` (`userId`),\rKEY `clientId` (`clientId`),\rKEY `tableId` (`tableId`)\r) ENGINE=InnoDB DEFAULT CHARSET=utf8;\r-- --------------------------------------------------------\r--\r-- Create and define schema of `Products` table\r--\rDROP TABLE IF EXISTS `Products`;\rCREATE TABLE IF NOT EXISTS `Products` (\r`id` int(11) NOT NULL AUTO_INCREMENT,\r`name` varchar(255) NOT NULL,\r`price` double NOT NULL,\r`stock` int(11) NOT NULL,\r`categoryId` int(11) NOT NULL,\r`createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,\r`updatedAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,\rPRIMARY KEY (`id`),\rKEY `categoryId` (`categoryId`)\r) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;\r--\r-- Insert data into `Products` table\r--\rINSERT INTO `Products` (`id`, `name`, `price`, `stock`, `categoryId`, `createdAt`, `updatedAt`)\rVALUES\r(1, \u0026#39;HAMBRUGUESA CHICA\u0026#39;, 120, 50, 4, \u0026#39;2024-10-07 05:50:51\u0026#39;, \u0026#39;2024-10-07 05:50:51\u0026#39;),\r(2, \u0026#39;HAMBRUGUESA GRANDE\u0026#39;, 180, 70, 4, \u0026#39;2024-10-07 05:50:52\u0026#39;, \u0026#39;2024-10-07 05:50:55\u0026#39;),\r(3, \u0026#39;COCA COLA 3LTS\u0026#39;, 180, 70, 2, \u0026#39;2024-10-07 05:50:53\u0026#39;, \u0026#39;2024-10-07 05:50:56\u0026#39;),\r(4, \u0026#39;COCA COLA 1.5LTS\u0026#39;, 180, 70, 2, \u0026#39;2024-10-07 05:50:54\u0026#39;, \u0026#39;2024-10-07 05:50:57\u0026#39;);\r-- --------------------------------------------------------\r--\r-- Create and define schema of `SequelizeMeta` table\r--\rDROP TABLE IF EXISTS `SequelizeMeta`;\rCREATE TABLE IF NOT EXISTS `SequelizeMeta` (\r`name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\rPRIMARY KEY (`name`),\rUNIQUE KEY `name` (`name`)\r) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\r--\r-- Insert data into `SequelizeMeta` table\r--\rINSERT INTO `SequelizeMeta` (`name`)\rVALUES\r(\u0026#39;20210408050330-create-table.js\u0026#39;),\r(\u0026#39;20210408051244-create-client.js\u0026#39;),\r(\u0026#39;20210408052326-create-user.js\u0026#39;),\r(\u0026#39;20210408064209-create-category.js\u0026#39;),\r(\u0026#39;20210408064602-create-product.js\u0026#39;),\r(\u0026#39;20210408070645-create-order.js\u0026#39;),\r(\u0026#39;20210408071614-create-order-product.js\u0026#39;);\r-- --------------------------------------------------------\r--\r-- Create and define schema of `Tables` table\r--\rDROP TABLE IF EXISTS `Tables`;\rCREATE TABLE IF NOT EXISTS `Tables` (\r`id` int(11) NOT NULL AUTO_INCREMENT,\r`name` varchar(255) DEFAULT NULL,\r`occupied` tinyint(1) DEFAULT \u0026#39;0\u0026#39;,\r`createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,\r`updatedAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,\rPRIMARY KEY (`id`)\r) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;\r--\r-- Insert data into `Tables`\r--\rINSERT INTO `Tables` (`id`, `name`, `occupied`, `createdAt`, `updatedAt`)\rVALUES\r(1, \u0026#39;PATIO 1\u0026#39;, 0, \u0026#39;2024-10-07 05:50:50\u0026#39;, \u0026#39;2024-10-07 05:50:50\u0026#39;),\r(2, \u0026#39;PATIO 2\u0026#39;, 0, \u0026#39;2024-10-07 05:50:50\u0026#39;, \u0026#39;2024-10-07 05:50:50\u0026#39;),\r(3, \u0026#39;PATIO 3\u0026#39;, 0, \u0026#39;2024-10-07 05:50:50\u0026#39;, \u0026#39;2024-10-07 05:50:50\u0026#39;),\r(4, \u0026#39;INTERIOR 1\u0026#39;, 0, \u0026#39;2024-10-07 05:50:50\u0026#39;, \u0026#39;2024-10-07 05:50:50\u0026#39;),\r(5, \u0026#39;INTERIOR 2\u0026#39;, 0, \u0026#39;2024-10-07 05:50:50\u0026#39;, \u0026#39;2024-10-07 05:50:50\u0026#39;),\r(6, \u0026#39;BARRA 1\u0026#39;, 0, \u0026#39;2024-10-07 05:50:50\u0026#39;, \u0026#39;2024-10-07 05:50:50\u0026#39;);\r-- --------------------------------------------------------\r--\r-- Create and define schema of `Users` table\r--\rDROP TABLE IF EXISTS `Users`;\rCREATE TABLE IF NOT EXISTS `Users` (\r`id` int(11) NOT NULL AUTO_INCREMENT,\r`name` varchar(255) NOT NULL,\r`email` varchar(255) NOT NULL,\r`password` varchar(255) NOT NULL,\r`image` varchar(255) NOT NULL DEFAULT \u0026#39;/avatar.png\u0026#39;,\r`isAdmin` tinyint(1) NOT NULL DEFAULT \u0026#39;0\u0026#39;,\r`createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,\r`updatedAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,\rPRIMARY KEY (`id`),\rUNIQUE KEY `email` (`email`)\r) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;\r--\r-- Insert data into `Users` table\r--\rINSERT INTO `Users` (`id`, `name`, `email`, `password`, `image`, `isAdmin`, `createdAt`, `updatedAt`)\rVALUES\r(1, \u0026#39;Admin\u0026#39;, \u0026#39;admin@example.com\u0026#39;, \u0026#39;$2b$10$Ob28q7LgYBCadB0mgVnPD.u8WtBVVoWs28iZTrxFF8LWuwG7xWiuO\u0026#39;, \u0026#39;/avatar.png\u0026#39;, 1, \u0026#39;2024-10-05 05:50:50\u0026#39;, \u0026#39;2024-10-05 05:50:50\u0026#39;),\r(2, \u0026#39;User\u0026#39;, \u0026#39;user@example.com\u0026#39;, \u0026#39;$2b$10$Ob28q7LgYBCadB0mgVnPD.u8WtBVVoWs28iZTrxFF8LWuwG7xWiuO\u0026#39;, \u0026#39;/avatar.png\u0026#39;, 0, \u0026#39;2024-10-05 05:50:50\u0026#39;, \u0026#39;2024-10-05 05:50:50\u0026#39;);\r--\r-- Add some restriction\r--\r--\r-- Update constraint for `OrderProducts` table\r--\rALTER TABLE `OrderProducts`\rADD CONSTRAINT `orderproducts_ibfk_1` FOREIGN KEY (`orderId`) REFERENCES `Orders` (`id`) ON DELETE CASCADE,\rADD CONSTRAINT `orderproducts_ibfk_2` FOREIGN KEY (`productId`) REFERENCES `Products` (`id`) ON DELETE CASCADE;\r--\r-- Update constraint for `Orders` table\r--\rALTER TABLE `Orders`\rADD CONSTRAINT `orders_ibfk_1` FOREIGN KEY (`userId`) REFERENCES `Users` (`id`) ON DELETE CASCADE,\rADD CONSTRAINT `orders_ibfk_2` FOREIGN KEY (`clientId`) REFERENCES `Clients` (`id`) ON DELETE CASCADE,\rADD CONSTRAINT `orders_ibfk_3` FOREIGN KEY (`tableId`) REFERENCES `Tables` (`id`) ON DELETE CASCADE;\r--\r-- Update constraint for `Products` table\r--\rALTER TABLE `Products`\rADD CONSTRAINT `products_ibfk_1` FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE;\rCOMMIT;\r/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;\r/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;\r/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */; Check the results Check database: SHOW DATABASES; "
},
{
	"uri": "//localhost:1313/3-connect-rds/",
	"title": "Launch RDS Instance",
	"tags": [],
	"description": "",
	"content": "Overview Amazon RDS Amazon RDS is a managed database on AWS, we can only access and manage at the RDBMS level, cannot access and manage at the operating system level. Including Aurora, MySQL, PostgreSQL, MSSQL, Oracle, and MariaDB. Amazon RDS provides the following features:\nAutomatic backup (both log and database - up to 35 days). Create a read-only replica (Read Replica) to serve reading workloads (reporting). Read Replica can be separated and converted into a Primary node. Run with automatic failover mechanism, Primary/Standby, also known as Multi-AZ mechanism. RDS is often used for OLTP applications. RDS provides data encryption at rest and in transit. RDS is also protected by firewall features like EC2 (Security Group and NACL). Scaling (changing instance size). Automatically increase storage capacity (Storage Auto Scale). Pricing Basically RDS charges based on parameters: Instance size. The larger the instance size, the higher the cost. Supports reserve instances similar to EC2. Amount of data stored (GB/month) Size of snapshots created. Other features such as Backtracking for Aurora. RDS Deployment Model RDS can be deployed in the following models:\nSingle Instance Single Instance with Multi-AZ option = yes Master – Read Only cluster Master – Read Only cluster with Multi-AZ option = yes Master – Multi Read cluster Single Instance Only 1 database instance is created in 1 Availability Zone (AZ). If an incident occurs at the AZ level, the database cannot be accessed. Suitable for Dev-Test environments to save costs\nSingle Instance with Multi-AZ option enabled\nA copy of the instance will be created in another AZ and operate in standby mode. The task of this standby instance is to sync data from the master, this instance cannot be accessed. When there is an incident, the standby instance will be promoted to the master (this is done automatically by AWS, the endpoint url is kept the same). If you enable multi AZ, the cost will be x2. Suitable for Database Production. Master – Read Only cluster\nAn instance with ReadOnly mode will be created and continuously replicate data from the master instance. This instance can only read data. Suitable for systems with read \u0026gt; write workloads, wanting to optimize the performance of the Database. After establishing the relationship, the created instance will be combined into 1 cluster. In the state where 2 instances have formed a cluster, if the Master instance has a problem, failover will be automatically performed, ReadOnly instance is promoted to Master. You should create a cluster and then add a read node to manage the connection at the cluster level (the number of read nodes can be optional) Note: If 2 instances are created separately and then the read-replica relationship is established, the endpoints of the 2 instances will be separate, so after failover, the connection from the App needs to be adjusted.\nMaster – Read Only cluster with Multi-AZ option = yes Similar to the Master – Read Only model, but all nodes are multi-AZ enabled. The cost will be 4 times that of the Single Instance model. Should I create an RDS Cluster or an RDS Instance? AWS provides a mechanism to create an RDS cluster to make node management and failover easier.\nAdvantages compared to creating a normal RDS instance:\nEndpoint management at the cluster level, not changed when an instance in the cluster has a problem. Automatic failover. Easy to scale read instances. Contents Create DB Subnet Group Create RDS Instance Launch EC2 Instance Create lambda function Connect RDS with lambda "
},
{
	"uri": "//localhost:1313/4-configure-apigateway/",
	"title": "Configure API Gateway",
	"tags": [],
	"description": "",
	"content": "Overview API Gateway An API Gateway service provided by AWS. It provides a simple way to build, manage, and secure RESTful APIs or WebSockets. AWS API Gateway is an important service in the AWS-based microservices architecture and is often used in conjunction with other AWS services such as AWS Lambda, EC2, S3, Amazon DynamoDB.\nWhat features does AWS API Gateway provide? Allows designing and developing RESTful or WebSocket APIs through a web GUI. Coordinates API requests to different systems or services. Authen/Author requests to APIs. Manage and monitor API requests, such as number of requests, response time\u0026hellip;• AWS API Gateway also provides security features, including authentication and authorization of API requests and encrypted secure communication between different systems. Features of API Gateway Is a fully managed service of AWS. Unlimited scalability and High Availablity. Zero idle cost Easy to setup Easy to combine with other services such as CloudWatch, WAF for monitoring \u0026amp; security purposes. When to use API Gateway? API Gateway is suitable for the following problems Micro-service architecture using lambda as backend Backend API for most use cases (web API, IoT) Gateway receives data directly from the client and then stores it in DynamoDB (DB First) Web Socket for realtime communication systems. Cost of API Gateway ? API Gateway PricingAPI Gateway is a service with idle cost = 0. Users only pay for the actual running cost,\nWith REST API Number of requests (eg Singapore region: $ 4.25/1M requests) Data transfer out ($/GB) Caching size in GB/hour With Web socket Message number (for Web socket). Eg $1.15/1M message with 32KB block. Connection minutes: $0.288/1M connection minutes Authentication for API Gateway ? API Gateway provides 2 commonly used direct authentication methods (authorizers):\nCognito Authorizer Directly linked to a Cognito User Pool used as an authorizer. When accessing the API, the client passes the token obtained directly through login with Cognito, API Gateway will check the token and allow access if the token is valid.\nLambda Authorizer (custom authorizer) When using this type of authorizer, you will implement the authen logic yourself on Lambda. There are 2 forms: authen based on TOKEN (JWT) or request parameter based (eg username/password).\nModel using Lambda as authorizer Content Create REST API Check API with Postman "
},
{
	"uri": "//localhost:1313/3-connect-rds/4-create-lambda-function/",
	"title": "Create lambda function",
	"tags": [],
	"description": "",
	"content": "Create lambda function In AWS Console interface. Search and select Lambda Create lambda function In the Create function section Select Author from scratch\nIn the Basic information section - Function name: ChangeDataRDS - Runtime: Node.js 20.x Select Role: RoleLambdatochangedataRDS Check Enble VPC\nSelect the information that has been initialized before: VPC FCJ-Lab-vpc Select public subnet: FCJ-Lab-subnet-private2-ap-southeast-1b \u0026amp; FCJ-Lab-subnet-private1-ap-southeast-1a Select Select existing security group Select FCJ-Lab-sg-public \u0026amp; FCJ-Lab-sg-db After setting up, finally select Create Download the Lambda function file with the following functions: Add new user \u0026amp; Delete user in the database. Download the .zip file containing the lambda function. Lambda Function\rChangeDataRDS.zip\r(534 ko)\rSelect Upload form Select Upload Select Zip file here Uploaded .zip file successfully At the Configuration tab in the lambda Select Environment variables\nClick Edit Select Add environment variable:\nRDS_LAMBDA_HOSTNAME: endpoint_your_rds_instance\rRDS_LAMBDA_USERNAME: admin\rRDS_LAMBDA_PASSWORD: admin2024\rRDS_LAMBDA_PORT: 3306\rJWT_SECRET: 0bac010eca699c25c8f62ba86e319c2305beb94641b859c32518cb854addb5f4 Select Save to save the environment. "
},
{
	"uri": "//localhost:1313/5-configure-cognito/",
	"title": "Configure Cognito",
	"tags": [],
	"description": "",
	"content": "Overview of AWS Cognito AWS Cognito is an identity management and user authentication service from Amazon Web Services (AWS). This service allows you to create secure web and mobile applications with user authentication, authorization, and login with multiple options such as user account, Social login or login via Identity Provider.\nCognito Features Register \u0026amp; Authenticate users using username/pw/email or social network account. Authorize users to applications or resources Verify email/phone number. Integrate with other services (API Gateway, Lambda) to build applications. Support for mobile applications (iOS, Android) through SDK Cognito sync: sync data between mobile devices Advanced Security: monitor \u0026amp; analyze user access to detect and prevent unusual access (optional). Cognito Pricing Cognito pricing is based on:\nNumber of Monthly Active Users. For example, in Singapore, it is $0.0055/MAU (the higher the cheaper) User sign in via SAML or OIDC: $0.015/MAU Advance Security feature: $0.05/MAU if enabled SMS in case of sending MFA messages: Depends on the region. Cognito\u0026rsquo;s limitations Number of Users per user pool: 40M (contact AWS if you want to increase) Maximum number of user pools: default 1,000, max 10,000 Custom attribute: 50 Limitations on Admin API call frequency, e.g.: UserCreation: 50 RPS. Increase by 10RPS for every 1 million MAUs AdminUserRead: 120 RPS. Increase 40 RPS for every 1 million MAU RevokeToken: 120 RPS. Increase 40 RPS for every 1 million MAU UserUpdate: 25 RPS cannot be increased. Note on Cognito\u0026rsquo;s token verification mechanism\nJWT tokens issued by Cognito will normally use client side verification (using the Public Key provided by Cognito. Note that AWS does not provide Cognito\u0026rsquo;s private key). This means that if the user logs out, the access-token is still valid until it expires (eg 30 minutes). If the system needs to revoke the issued access-token when the user has actions such as changing password, logging out, it cannot be done with Cognito. Of course, it is possible to workaround using Caching/DB techniques. Content Create user pool Create user \u0026amp; group cognito "
},
{
	"uri": "//localhost:1313/3-connect-rds/5-connect-lambda-rds/",
	"title": "Connect RDS Instance with Lambda",
	"tags": [],
	"description": "",
	"content": "Connect Lambda to RDS Instance At the Configuration tab Select RDS databases Select Connect to RDS database Inside RDS database Select Use an exiting database Select RDS instance: fcj-database-instance Then select Create Test event action: Create new event Event name: CREATE_USER Event JSON: {\r\u0026#34;method\u0026#34;: \u0026#34;POST\u0026#34;,\r\u0026#34;name\u0026#34;: \u0026#34;John Doe\u0026#34;,\r\u0026#34;e-mail\u0026#34;: \u0026#34;johndoe@example.com\u0026#34;,\r\u0026#34;password\u0026#34;: \u0026#34;hashedpassword123\u0026#34;,\r\u0026#34;image\u0026#34;: \u0026#34;/avatar.png\u0026#34;,\r\u0026#34;isAdmin\u0026#34;: 1,\r\u0026#34;createdAt\u0026#34;: \u0026#34;2024-06-05 05:50\u0026#34;,\r\u0026#34;updatedAt\u0026#34;: \u0026#34;2024-10-05 05:50\u0026#34;\r} After testing CREATE_USERS Test again using EC2 "
},
{
	"uri": "//localhost:1313/6-testing/",
	"title": "Testing API with Cognito",
	"tags": [],
	"description": "",
	"content": "Check operation //Syntax\nhttps://\u0026lt;your user pool domain\u0026gt;/authorize?client_id=\u0026lt;your app client ID\u0026gt;\u0026amp;response_type=\u0026lt;code/token\u0026gt;\u0026amp;scope=\u0026lt;scopes to request\u0026gt;\u0026amp;redirect_uri=\u0026lt;your callback URL\u0026gt; Or the following syntax:\nhttps://\u0026lt;your user pool domain\u0026gt;/authorize?client_id=\u0026lt;your app client ID\u0026gt;\u0026amp;response_type=token\u0026amp;scope=openid\u0026amp;redirect_uri=https://google.com Copy Cognito domain Copy Client ID Edit the syntax above to access cognito via the link. Use the username and password of the user created in cognito to log in. Enter information to change change password: Then you rollback to the url https://google.com with the token information. We copy to the editor to get the token 6. Learn about Token content Return to API Gateway\nGo to the API Gateway created in the API Gateway Deployment section Select Create an authorizer Set up information for cognito authentication Authorizer name: coginito-authorizer\nAuthorizer type : Cognito\nCognito user pool: test-lamda-pool-01 Create authorizer Return to resources Select the POST method. Current Authorization: NONE Select Edit Edit method information\nSelect the created Authorization: * *cognito-authorizer** Select Save Deploy to run the method with the authorizer just assigned to the method Now we copy Invoke URL Go to postman tool.\nClick on the + sign, to add a new tab\nSelect method POST Enter InvokURL of the POST API recorded from the previous step Enter RequestBody in raw form: { \u0026#34;method\u0026#34;: \u0026#34;GET\u0026#34;\r} Press the Send button Result: We get an authentication error (401 - Unauthorzierd) ![Request API](/images/6/15.png ?width=90pc)\nHighlight and copy id_token obtained from Step 6 Go to ** Postman**\nSelect Authorization Type: Bearer Token Paste the copied id_token into the token box on the right. Then Resend the request The result returns user information Add new user to database With Authorization: token pasted Result: New addition successful Check User table via EC2 connected to RDS Check the log in Cloud Watch ! Cloud Watch log\n"
},
{
	"uri": "//localhost:1313/7-clean-up/",
	"title": "Clean up resource",
	"tags": [],
	"description": "",
	"content": "We will clean up resources in the following order:\nGo to API Gateway to delete the created resource\nGo to Cognito to delete the created resource\nSelect Delete Cognito domain Select Deactivate deletion protection Go to Lambda to delete the created function.\nAutomatically delete the generated Network interfaces. Check again, if it is still related to the resource, delete it to avoid incurring costs. Go to Amazon RDS service\nOpen the Amazon RDS console.\nIn the navigation pane, select Subnet groups.\nSelect the DB subnet group related to the lab.\nSelect Delete, then select Delete in the confirmation window.\nSelect the RDS instance that was created\nGo to Modify. Scroll down and uncheck Enable deletion protection\nSelect Action and select delete\nUncheck Create final snapshot\nUncheck Retain automated backups\nWait a few minutes to delete\nAfter deleting the db instance, check the Snapshot, Automated Backup versions (if any, delete if not necessary to avoid incurring costs)\nIn the subnet group section. Delete the subnet group related to the created VPC.\nTerminate EC2 instance\nAccess EC2 Management Console.\nOn the left navigation bar, select Instances.\nSelect all EC2 Instances related to the lab.\nClick Actions.\nClick Manage Instance State.\nSelect Terminate.\nOpen the Amazon EC2 console.\nSelect Amazon EC2 Dashboard, then select Elastic IPs.\nSelect Elastic IP address related to the lab.\nFrom Actions, select Release Elastic IP addresses.\nOn the confirmation page, select Release.\nGo to Network interfaces\nCheck for missing Network interfaces related to the lesson\nTo delete VPC and related resources:\nAccess the endpoint, delete the resource that was created during the practice, the endpoint containing the created VPC.\nOpen the Amazon VPC dashboard.\nDelete the VPC.\nSelect VPC Dashboard, then select VPC.\nSelect the VPC you want to delete.\nFrom Actions, select Delete VPC.\nOn the confirmation page, type delete, then select Delete.\nOpen the Amazon VPC dashboard.\nSelect VPC Dashboard, then select Security Groups.\nCheck for missing security groups after deleting the VPC\nSelect the security group related to the lab.\nSelect Actions, select Delete security groups, and then select Delete to confirm.\n"
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]